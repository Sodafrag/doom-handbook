**序言--Jason Fried**
一个团队的工作方式极大地影响着团队所能取得的成绩。如何工作，采用哪些方式方法，处理问题的方式，自律，信任，沟通方式，工作节奏。*方式——即如何工作——是团队的根本与基石。*

你可能常听人说：“执行力决定一切，”但事实似乎不太如此，这种看法甚至大部分时候都是错的。

在项目工作中，尤其是软件开发项目中，错误的执行方式将会摧毁士气，挫败团队，腐化信任，锈蚀团队的运转，最终阻碍整个过程的长期运转。没错，工作的确“完成”了，但代价如何？在这样的工作方式之下，对我们自己又造成了何等影响？我们真的要月复一月年复一年地继续这般下去吗？

你完成的多少项目，你愿意从头再来一次？有多少项目陷入泥潭，最后只剩下如山的未完成工作和消耗殆尽的团队成员。有多少项目的核心本质完全是一串不切实际地期望。又有多少项目让各个团队怒目相向，从开发到投资者都*无比恼火*，以至于相比完成，结束是更好的结局。

有时，执行力的确决定一切——决定了错误的走向。那么，什么才是正确的执行力？


# 介绍
本书将会向你介绍Basecamp的开发方式。在书中会有大量的技巧，你可以将其运用到你自己的开发流程中。

无论你是公司创始人，CTO，产品经理，设计师，或者程序开发者，大家来此的目的大多是因为我们在软件开发公司中都面临的一些共同问题。

# 成长的烦恼
当软件开发的团队成员越来越多，一些常见的问题也开始浮现：
- 团队成员会感觉自己手中的项目永远无法完成。
- 产品经理没有时间去在战略层面对产品进行思考。
- 公司对建立者开始质问自己：“为何我们不能像以前一样能快速地完成并递交产品功能？”

当我们在Basecamp的团队从4个人扩大到50个人的时候，我们同样经历了这样的挑战。

Basecamp始于2003年，起初只是一个我们为自己搭建的工具。当时我们的主要工作是为客户提供网站设计的咨询建议。*但是在客户，设计师，各个经理几经交换的电话讨论中信息会逐渐丢失。*我们希望Basecamp能成为我们信息的中心，参与项目中的任何人都能在在此检阅信息，讨论，以及安排下一步工作。后来我们发现，这不是我们独有的问题，不少公司都会遇到类似的“信息流失”问题。如今，在各行各业中的数百万人都靠着Basecamp来分享工作的*中心讯息*

搭建Basecamp的工作总共由3个人完成。产品设计工作由Basecamp的创始人Jason Fried领头， 联合创始人David Heinemeier Hansson则负责程序编写（在此项目的工程中还产出一个副产品，便是后来的广为人知的Ruby on Rails框架。）。当时的我主要负责产品的用户界面，和使用体验。将Jason的设计转化为实际的产品功能，并和他一道补充设计概念中的细节。

最初的原型设计是在2003年七月，在2004年二月我们发布了第一个版本，在此期间，David每周只在这个项目上花10个小时。我们清楚的知道，如果我们不谨慎（deliberately）的使用这10个小时，那么我们是完不成这个产品的。我们最主要的考虑，是把我们产品（scope）锤削至一定的规格，塞进有限的时间预算中。

当我们业务开始成长，我也开始拓展我的技能。在与David的合作中我逐渐了解了Ruby on Rails，我从此跨入了编写代码的大门。我掌握了程序员们用来处理复杂问题的诸多技巧：比如因子分解（factoring），抽象层级，问题拆分等等。当我双脚同时踏于设计与编程两界时，我开始思考，是否能将这些从软件开发中学到的原则应用到我们设计/管理产品中。

最开始实际测试这个想法是在2009年。那时我们已经招募了一些程序人员，并且已经将我们的产品服务拓展至了4个。我们希望能将这4个分别的产品整合，无缝衔接，统一收费。这是一个巨大的工程，并且对用户体验来说更是背道而驰。就算我们成功完成了工作，我们也必须要打断用户的产品使用体验，用手中极难解释的原因强制他们使用新的用户名与密码。在此书中，我将站在设计师与产品经理的角度检视产品，设计原型，然后分步阐释如何处理这些复杂的问题。

在此项目中我们学习到了良好的经验，于是我们在2012年将同样的技巧应用到了我们的Basecamp 2.0开发中。在此开发中同样拥有不少复杂的问题需要处理，但过程却非常流畅。

到了2015年，我们的核心团队在经过这段时间的试验之后取得了非常好的效果。但我们发现我们的方式很难向新进人员传达。我们的产品团队人员增加了3倍，并且所有人都是远程工作。这让我们很难通过一个有效的方式阐释我们的想法。我们需要一套专门的语言来描述我们的工作方式，更有效的组织结构，以便我们在未来更上一层。

![41EE293F3837D10BE8042501C6562EBF2FF9FE279E8C81BF2CF2BDF80BD6B191_sk_11_cid_1](/Users/SJChen/Library/Containers/com.apple.AMPArtworkAgent/Data/Documents/artwork/41EE293F3837D10BE8042501C6562EBF2FF9FE279E8C81BF2CF2BDF80BD6B191_sk_11_cid_1.jpeg)

为了管理我们新的任务，我们将曾经的“按需分配”方式*换成了*重复周期式。（找到合适的时间周期花了我们不少时间，我将在本书内详细阐述。）我最终确立了我们*pitch和betting*过程。而我的角色则从产品和设计管理转到了产品战略。我需要自己的“语言”，比如“塑形”，用来描述最前期的设计工作，在此阶段我们将定下界限，降低风险。之后我们才会将工作交给特定的团队。

在数年的工作中，我们的团队沟通越来越顺畅，同时也有越来越多的友人和同僚们开始向我们询问，我们到底是如何做到的。终于，Jason有一天找到我说，我觉得你应该就此写一本书。

这便是结果。本书主要分为两个部分。第一部分将会介绍最基础的理论和想法。我希望在这部分中介绍给大家沟通”语言“，用来解释和*deal with*风险，不确定性和任何项目都需要面临的挑战。第二部分，书中会详细介绍现在我们是如何使用这些方式来进行开发工作的。

[^在经历了数年的试错与反向思考之后 —— 我们解决了这些问题。在过去的15年中，我们持续不断地发布高质量的软件，并在开发中保持着调理与理智。

最近，有不少友人和同僚们都在向我们询问，我们到底是如何做的。此书便是我们给予的答案。
]
下面为大家先行呈上书中几个主要的想法。

# 六周周期
首先，我们采用六周的周期。六周的时间足以让我们从头到尾构建好一个完整有意义的东西，同时又不会太长，团队成员从开发起始就能望到项目的完成时间，这让项目成员们能够好好思考并安排自己的时间。我们的绝大部分产品功能，都是在六周之内完成的。

我们的决策目的是让产品在六周之后有一次改观，而非微观地管理时间。我们从不计算工时，也不过问成员他们如何花销自己每日的时间。我们没有每日例会，我们从不朝三暮四每两周就更改一次我们的目标。我们的注意力放在更高的层级之上。我们先询问自己：“如果这个产品在六周之后上线，我们是否真正感到满意。我们是否觉得自己的时间花得物有所值。”然后我们将分配六周的时间给团队，不再过问，直到六周之后。

![cover_2](resource:assets/images/section_1/cover_2.jpeg)

# 塑形工作
第二，在我们讲工作交给团队之前，我们先对工作进行塑形。这部分工作由更为资深的人员承担，在其他团队进行周期工作时同步进行。塑形团队的成员会在我们对项目进行押注之前先定义好关键的元素。项目本身的定义被限制在一个合适的抽象层级：它足够的具体，成员们会知道自己到底要做什么，又足够的抽象让他们有足够的思考空间来自己探寻细节。

在塑形阶段，我们的注意力更多地放在我们的“食欲”上，而非计划时间。我们不问这个项目“需要花多少时间”，而是问“我们想要花多少时间”。这个项目想法值得我们花多少时间？这便是我们塑形的过程：缩小问题的范围并且设计出解决方案的框架并将其限制在我们的“食欲”界限内。

# 让团队承担责任
第三，我们将责任全权交予由设计师和开发者组成的小团队。他们自己定义“任务”，调整“scope”，协同工作，一次搭建一个vitical slice of project。这是我们完全不同于大部分人采用的开发方法 —— 由项目经理划分项目，然后开发者领取各自的开发任务。

以上的这些概念结合之下，塑造了一个更好的周期方式。当开发团队拥有更多的自主权，资深人员将会花更少的时间进行管理。而更少的管理时间意味着将有更多的时间花费在更好地塑形项目上。当项目被更好的塑形，开发团队将会有更加明确的界限，从而更好的进行自主工作。

# 寻定风险
在我们开发中的每一步，我们都会寻定一个特定的风险：无法按时完成。这本书要讲的并不是如何避免开发错误的产品，这方面的内容有其他的书籍（我们推荐“Coompeting Against Luck”）。提高你的战略眼光应该是基于你能按时递交产品的能力之上。如果你不能有效执行，那么纵使你有全世界最好的战略思想又有什么用呢。

本书中的风险二字瞄准的是另外的领域：项目停滞不前的风险，项目在最终递交之前深陷泥潭的风险，在未预期的问题上花费了大量的时间，却无法将接下来的时间投入更有意义的工作。
